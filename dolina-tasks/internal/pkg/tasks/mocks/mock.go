// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_tasks is a generated GoMock package.
package mock_tasks

import (
	models "dolina/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockUsecase) Validate(post models.News) models.News {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", post)
	ret0, _ := ret[0].(models.News)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockUsecaseMockRecorder) Validate(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUsecase)(nil).Validate), post)
}

// FindVirus mocks base method.
func (m *MockUsecase) FindVirus(post []models.File) models.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirus", post)
	ret0, _ := ret[0].(models.File)
	return ret0
}

// FindVirus indicates an expected call of FindVirus.
func (mr *MockUsecaseMockRecorder) FindVirus(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirus", reflect.TypeOf((*MockUsecase)(nil).FindVirus), post)
}
